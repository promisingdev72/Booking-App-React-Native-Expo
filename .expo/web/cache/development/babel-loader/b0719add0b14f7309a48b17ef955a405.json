{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoImageManipulator from \"./ExpoImageManipulator\";\nimport { SaveFormat } from \"./ImageManipulator.types\";\nexport function manipulateAsync(uri) {\n  var actions,\n      _ref,\n      _ref$format,\n      format,\n      rest,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function manipulateAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          actions = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n          _ref = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, _ref$format = _ref.format, format = _ref$format === void 0 ? SaveFormat.JPEG : _ref$format, rest = _objectWithoutProperties(_ref, [\"format\"]);\n\n          if (ExpoImageManipulator.manipulateAsync) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n\n        case 4:\n          if (typeof uri === 'string') {\n            _context.next = 6;\n            break;\n          }\n\n          throw new TypeError('The \"uri\" argument must be a string');\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ExpoImageManipulator.manipulateAsync(uri, actions, _objectSpread({\n            format: format\n          }, rest)));\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport * from \"./ImageManipulator.types\";","map":{"version":3,"sources":["../src/ImageManipulator.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,oBAAP;AACA,SAA8B,UAA9B;AAEA,OAAO,SAAe,eAAf,CACL,GADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,OAFK,2DAEe,EAFf;AAAA,yEAGgD,EAHhD,qBAGH,MAHG,EAGH,MAHG,4BAGM,UAAU,CAAC,IAHjB,gBAG0B,IAH1B;;AAAA,cAKA,oBAAoB,CAAC,eALrB;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,iBAA5C,CANH;;AAAA;AAAA,cAQC,OAAO,GAAP,KAAe,QARhB;AAAA;AAAA;AAAA;;AAAA,gBASG,IAAI,SAAJ,CAAc,qCAAd,CATH;;AAAA;AAAA;AAAA,2CAWQ,oBAAoB,CAAC,eAArB,CAAqC,GAArC,EAA0C,OAA1C;AAAqD,YAAA,MAAM,EAAN;AAArD,aAAgE,IAAhE,EAXR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoImageManipulator from './ExpoImageManipulator';\nimport { Action, ImageResult, SaveFormat, SaveOptions } from './ImageManipulator.types';\n\nexport async function manipulateAsync(\n  uri: string,\n  actions: Action[] = [],\n  { format = SaveFormat.JPEG, ...rest }: SaveOptions = {}\n): Promise<ImageResult> {\n  if (!ExpoImageManipulator.manipulateAsync) {\n    throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n  }\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n  return await ExpoImageManipulator.manipulateAsync(uri, actions, { format, ...rest });\n}\n\nexport * from './ImageManipulator.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}