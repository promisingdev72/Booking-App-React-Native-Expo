{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport type from 'type-detect';\n\nvar EventRegister = function () {\n  function EventRegister() {\n    _classCallCheck(this, EventRegister);\n  }\n\n  _createClass(EventRegister, null, [{\n    key: \"addEventListener\",\n    value: function addEventListener(eventName, callback) {\n      if (type(eventName) === 'string' && type(callback) === 'function') {\n        EventRegister._Listeners.count++;\n        var eventId = 'l' + EventRegister._Listeners.count;\n        EventRegister._Listeners.refs[eventId] = {\n          name: eventName,\n          callback: callback\n        };\n        return eventId;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(id) {\n      if (type(id) === 'string') {\n        return delete EventRegister._Listeners.refs[id];\n      }\n\n      return false;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      var removeError = false;\n      Object.keys(EventRegister._Listeners.refs).forEach(function (_id) {\n        var removed = delete EventRegister._Listeners.refs[_id];\n        removeError = !removeError ? !removed : removeError;\n      });\n      return !removeError;\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(eventName, data) {\n      Object.keys(EventRegister._Listeners.refs).forEach(function (_id) {\n        if (EventRegister._Listeners.refs[_id] && eventName === EventRegister._Listeners.refs[_id].name) EventRegister._Listeners.refs[_id].callback(data);\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      return EventRegister.addEventListener(eventName, callback);\n    }\n  }, {\n    key: \"rm\",\n    value: function rm(eventName) {\n      return EventRegister.removeEventListener(eventName);\n    }\n  }, {\n    key: \"rmAll\",\n    value: function rmAll() {\n      return EventRegister.removeAllListeners();\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName, data) {\n      EventRegister.emitEvent(eventName, data);\n    }\n  }]);\n\n  return EventRegister;\n}();\n\nEventRegister._Listeners = {\n  count: 0,\n  refs: {}\n};\nexport { EventRegister };","map":{"version":3,"sources":["D:/Work/App-Zip/node_modules/react-native-event-listeners/index.js"],"names":["type","EventRegister","eventName","callback","_Listeners","count","eventId","refs","name","id","removeError","Object","keys","forEach","_id","removed","data","addEventListener","removeEventListener","removeAllListeners","emitEvent"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,aAAjB;;IAEMC,a;;;;;;;qCAOoBC,S,EAAWC,Q,EAAU;AAC3C,UACEH,IAAI,CAACE,SAAD,CAAJ,KAAoB,QAApB,IACAF,IAAI,CAACG,QAAD,CAAJ,KAAmB,UAFrB,EAGE;AACAF,QAAAA,aAAa,CAACG,UAAd,CAAyBC,KAAzB;AACA,YAAMC,OAAO,GAAG,MAAML,aAAa,CAACG,UAAd,CAAyBC,KAA/C;AACAJ,QAAAA,aAAa,CAACG,UAAd,CAAyBG,IAAzB,CAA8BD,OAA9B,IAAyC;AACvCE,UAAAA,IAAI,EAAEN,SADiC;AAEvCC,UAAAA,QAAQ,EAARA;AAFuC,SAAzC;AAIA,eAAOG,OAAP;AACD;;AACD,aAAO,KAAP;AACD;;;wCAE0BG,E,EAAI;AAC7B,UAAIT,IAAI,CAACS,EAAD,CAAJ,KAAa,QAAjB,EAA2B;AACzB,eAAO,OAAOR,aAAa,CAACG,UAAd,CAAyBG,IAAzB,CAA8BE,EAA9B,CAAd;AACD;;AACD,aAAO,KAAP;AACD;;;yCAE2B;AAC1B,UAAIC,WAAW,GAAG,KAAlB;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYX,aAAa,CAACG,UAAd,CAAyBG,IAArC,EAA2CM,OAA3C,CAAmD,UAAAC,GAAG,EAAI;AACxD,YAAMC,OAAO,GAAG,OAAOd,aAAa,CAACG,UAAd,CAAyBG,IAAzB,CAA8BO,GAA9B,CAAvB;AACAJ,QAAAA,WAAW,GAAI,CAACA,WAAF,GAAiB,CAACK,OAAlB,GAA4BL,WAA1C;AACD,OAHD;AAIA,aAAO,CAACA,WAAR;AACD;;;8BAEgBR,S,EAAWc,I,EAAM;AAChCL,MAAAA,MAAM,CAACC,IAAP,CAAYX,aAAa,CAACG,UAAd,CAAyBG,IAArC,EAA2CM,OAA3C,CAAmD,UAAAC,GAAG,EAAI;AACxD,YACEb,aAAa,CAACG,UAAd,CAAyBG,IAAzB,CAA8BO,GAA9B,KACAZ,SAAS,KAAKD,aAAa,CAACG,UAAd,CAAyBG,IAAzB,CAA8BO,GAA9B,EAAmCN,IAFnD,EAIEP,aAAa,CAACG,UAAd,CAAyBG,IAAzB,CAA8BO,GAA9B,EAAmCX,QAAnC,CAA4Ca,IAA5C;AACH,OAND;AAOD;;;uBAKSd,S,EAAWC,Q,EAAU;AAC7B,aAAOF,aAAa,CAACgB,gBAAd,CAA+Bf,SAA/B,EAA0CC,QAA1C,CAAP;AACD;;;uBAESD,S,EAAW;AACnB,aAAOD,aAAa,CAACiB,mBAAd,CAAkChB,SAAlC,CAAP;AACD;;;4BAEc;AACb,aAAOD,aAAa,CAACkB,kBAAd,EAAP;AACD;;;yBAEWjB,S,EAAWc,I,EAAM;AAC3Bf,MAAAA,aAAa,CAACmB,SAAd,CAAwBlB,SAAxB,EAAmCc,IAAnC;AACD;;;;;;AAlEGf,a,CAEGG,U,GAAa;AAClBC,EAAAA,KAAK,EAAE,CADW;AAElBE,EAAAA,IAAI,EAAE;AAFY,C;AAoEtB,SAASN,aAAT","sourcesContent":["import type from 'type-detect'\n\nclass EventRegister {\n\n  static _Listeners = {\n    count: 0,\n    refs: {},\n  }\n\n  static addEventListener(eventName, callback) {\n    if (\n      type(eventName) === 'string' &&\n      type(callback) === 'function'\n    ) {\n      EventRegister._Listeners.count++\n      const eventId = 'l' + EventRegister._Listeners.count\n      EventRegister._Listeners.refs[eventId] = {\n        name: eventName,\n        callback,\n      }\n      return eventId\n    }\n    return false\n  }\n\n  static removeEventListener(id) {\n    if (type(id) === 'string') {\n      return delete EventRegister._Listeners.refs[id]\n    }\n    return false\n  }\n\n  static removeAllListeners() {\n    let removeError = false\n    Object.keys(EventRegister._Listeners.refs).forEach(_id => {\n      const removed = delete EventRegister._Listeners.refs[_id]\n      removeError = (!removeError) ? !removed : removeError\n    })\n    return !removeError\n  }\n\n  static emitEvent(eventName, data) {\n    Object.keys(EventRegister._Listeners.refs).forEach(_id => {\n      if (\n        EventRegister._Listeners.refs[_id] &&\n        eventName === EventRegister._Listeners.refs[_id].name\n      )\n        EventRegister._Listeners.refs[_id].callback(data)\n    })\n  }\n\n  /*\n   * shortener\n   */\n  static on(eventName, callback) {\n    return EventRegister.addEventListener(eventName, callback)\n  }\n\n  static rm(eventName) {\n    return EventRegister.removeEventListener(eventName)\n  }\n\n  static rmAll() {\n    return EventRegister.removeAllListeners()\n  }\n\n  static emit(eventName, data) {\n    EventRegister.emitEvent(eventName, data)\n  }\n\n} \n\nexport { EventRegister }\n"]},"metadata":{},"sourceType":"module"}