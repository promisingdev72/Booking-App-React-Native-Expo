{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoApplication from \"./ExpoApplication\";\nexport var nativeApplicationVersion = ExpoApplication ? ExpoApplication.nativeApplicationVersion || null : null;\nexport var nativeBuildVersion = ExpoApplication ? ExpoApplication.nativeBuildVersion || null : null;\nexport var applicationName = ExpoApplication ? ExpoApplication.applicationName || null : null;\nexport var applicationId = ExpoApplication ? ExpoApplication.applicationId || null : null;\nexport var androidId = ExpoApplication ? ExpoApplication.androidId || null : null;\nexport function getInstallReferrerAsync() {\n  return _regeneratorRuntime.async(function getInstallReferrerAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoApplication.getInstallReferrerAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoApplication.getInstallReferrerAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getIosIdForVendorAsync() {\n  var _await$ExpoApplicatio;\n\n  return _regeneratorRuntime.async(function getIosIdForVendorAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoApplication.getIosIdForVendorAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoApplication.getIosIdForVendorAsync());\n\n        case 4:\n          _context2.t0 = _await$ExpoApplicatio = _context2.sent;\n\n          if (!(_context2.t0 != null)) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.t1 = _await$ExpoApplicatio;\n          _context2.next = 10;\n          break;\n\n        case 9:\n          _context2.t1 = null;\n\n        case 10:\n          return _context2.abrupt(\"return\", _context2.t1);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var ApplicationReleaseType;\n\n(function (ApplicationReleaseType) {\n  ApplicationReleaseType[ApplicationReleaseType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApplicationReleaseType[ApplicationReleaseType[\"SIMULATOR\"] = 1] = \"SIMULATOR\";\n  ApplicationReleaseType[ApplicationReleaseType[\"ENTERPRISE\"] = 2] = \"ENTERPRISE\";\n  ApplicationReleaseType[ApplicationReleaseType[\"DEVELOPMENT\"] = 3] = \"DEVELOPMENT\";\n  ApplicationReleaseType[ApplicationReleaseType[\"AD_HOC\"] = 4] = \"AD_HOC\";\n  ApplicationReleaseType[ApplicationReleaseType[\"APP_STORE\"] = 5] = \"APP_STORE\";\n})(ApplicationReleaseType || (ApplicationReleaseType = {}));\n\nexport function getIosApplicationReleaseTypeAsync() {\n  return _regeneratorRuntime.async(function getIosApplicationReleaseTypeAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoApplication.getApplicationReleaseTypeAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-application', 'getApplicationReleaseTypeAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoApplication.getApplicationReleaseTypeAsync());\n\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getIosPushNotificationServiceEnvironmentAsync() {\n  return _regeneratorRuntime.async(function getIosPushNotificationServiceEnvironmentAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoApplication.getPushNotificationServiceEnvironmentAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-application', 'getPushNotificationServiceEnvironmentAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoApplication.getPushNotificationServiceEnvironmentAsync());\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getInstallationTimeAsync() {\n  var installationTime;\n  return _regeneratorRuntime.async(function getInstallationTimeAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoApplication.getInstallationTimeAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoApplication.getInstallationTimeAsync());\n\n        case 4:\n          installationTime = _context5.sent;\n          return _context5.abrupt(\"return\", new Date(installationTime));\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getLastUpdateTimeAsync() {\n  var lastUpdateTime;\n  return _regeneratorRuntime.async(function getLastUpdateTimeAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (ExpoApplication.getLastUpdateTimeAsync) {\n            _context6.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(ExpoApplication.getLastUpdateTimeAsync());\n\n        case 4:\n          lastUpdateTime = _context6.sent;\n          return _context6.abrupt(\"return\", new Date(lastUpdateTime));\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Application.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoApplication from './ExpoApplication';\n\nexport const nativeApplicationVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeApplicationVersion || null\n  : null;\nexport const nativeBuildVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeBuildVersion || null\n  : null;\nexport const applicationName: string | null = ExpoApplication\n  ? ExpoApplication.applicationName || null\n  : null;\nexport const applicationId: string | null = ExpoApplication\n  ? ExpoApplication.applicationId || null\n  : null;\nexport const androidId: string | null = ExpoApplication ? ExpoApplication.androidId || null : null;\n\nexport async function getInstallReferrerAsync(): Promise<string> {\n  if (!ExpoApplication.getInstallReferrerAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n  }\n  return await ExpoApplication.getInstallReferrerAsync();\n}\n\nexport async function getIosIdForVendorAsync(): Promise<string | null> {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n  return (await ExpoApplication.getIosIdForVendorAsync()) ?? null;\n}\n\nexport enum ApplicationReleaseType {\n  UNKNOWN = 0,\n  SIMULATOR = 1,\n  ENTERPRISE = 2,\n  DEVELOPMENT = 3,\n  AD_HOC = 4,\n  APP_STORE = 5,\n}\n\nexport async function getIosApplicationReleaseTypeAsync(): Promise<ApplicationReleaseType> {\n  if (!ExpoApplication.getApplicationReleaseTypeAsync) {\n    throw new UnavailabilityError('expo-application', 'getApplicationReleaseTypeAsync');\n  }\n  return await ExpoApplication.getApplicationReleaseTypeAsync();\n}\n\nexport async function getIosPushNotificationServiceEnvironmentAsync(): Promise<string> {\n  if (!ExpoApplication.getPushNotificationServiceEnvironmentAsync) {\n    throw new UnavailabilityError('expo-application', 'getPushNotificationServiceEnvironmentAsync');\n  }\n  return await ExpoApplication.getPushNotificationServiceEnvironmentAsync();\n}\n\nexport async function getInstallationTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getInstallationTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n  }\n  const installationTime = await ExpoApplication.getInstallationTimeAsync();\n  return new Date(installationTime);\n}\n\nexport async function getLastUpdateTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n  const lastUpdateTime = await ExpoApplication.getLastUpdateTimeAsync();\n  return new Date(lastUpdateTime);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}