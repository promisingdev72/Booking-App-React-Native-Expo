{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Work\\\\App-Zip\\\\source\\\\component\\\\ServicesCell\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport styles from \"./styles\";\nimport { COLOR } from \"../../colors\";\nimport { IMAGE } from \"../../images\";\n\nvar ServicesCell = function (_Component) {\n  _inherits(ServicesCell, _Component);\n\n  var _super = _createSuper(ServicesCell);\n\n  function ServicesCell() {\n    _classCallCheck(this, ServicesCell);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ServicesCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          item = _this$props.item,\n          index = _this$props.index,\n          _this$props$show_only = _this$props.show_only,\n          show_only = _this$props$show_only === void 0 ? false : _this$props$show_only;\n      return React.createElement(TouchableOpacity, {\n        style: [styles.containerView],\n        onPress: function onPress() {\n          if (!show_only) {\n            _this.props.onPress(index);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.serviceContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.serviceTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }\n      }, item.name), React.createElement(Text, {\n        style: styles.serviceText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }\n      }, item.priceTxt)), !show_only && this.renderImage());\n    }\n  }, {\n    key: \"renderImage\",\n    value: function renderImage() {\n      var _this$props2 = this.props,\n          index = _this$props2.index,\n          selected = _this$props2.selected;\n      var is_selected = selected.includes(index);\n      return React.createElement(View, {\n        style: styles.checkContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }, is_selected ? React.createElement(Image, {\n        style: styles.checkIcon,\n        source: IMAGE.check,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }\n      }) : React.createElement(View, {\n        style: styles.checkIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      }));\n    }\n  }]);\n\n  return ServicesCell;\n}(Component);\n\nexport { ServicesCell as default };","map":{"version":3,"sources":["D:/Work/App-Zip/source/component/ServicesCell/index.js"],"names":["React","Component","styles","COLOR","IMAGE","ServicesCell","props","item","index","show_only","containerView","onPress","serviceContainer","serviceTitle","name","serviceText","priceTxt","renderImage","selected","is_selected","includes","checkContainer","checkIcon","check"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAEA,OAAOC,MAAP;AAEA,SAASC,KAAT;AACA,SAASC,KAAT;;IAEqBC,Y;;;;;;;;;;;;;6BAER;AAAA;;AAAA,wBACsC,KAAKC,KAD3C;AAAA,UACGC,IADH,eACGA,IADH;AAAA,UACSC,KADT,eACSA,KADT;AAAA,8CACgBC,SADhB;AAAA,UACgBA,SADhB,sCAC4B,KAD5B;AAEL,aACI,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE,CAACP,MAAM,CAACQ,aAAR,CAAzB;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,cAAI,CAACD,SAAL,EAAgB;AACZ,YAAA,KAAI,CAACH,KAAL,CAAWK,OAAX,CAAmBH,KAAnB;AACH;AACJ,SALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACU,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEV,MAAM,CAACW,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCN,IAAI,CAACO,IAAxC,CADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEZ,MAAM,CAACa,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCR,IAAI,CAACS,QAAvC,CAFJ,CANJ,EAWQ,CAACP,SAAD,IAAc,KAAKQ,WAAL,EAXtB,CADJ;AAiBH;;;kCAEa;AAAA,yBACkB,KAAKX,KADvB;AAAA,UACFE,KADE,gBACFA,KADE;AAAA,UACKU,QADL,gBACKA,QADL;AAEV,UAAIC,WAAW,GAAGD,QAAQ,CAACE,QAAT,CAAkBZ,KAAlB,CAAlB;AACA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACmB,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,WAAW,GACR,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEjB,MAAM,CAACoB,SAArB;AACI,QAAA,MAAM,EAAElB,KAAK,CAACmB,KADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADQ,GAIR,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAErB,MAAM,CAACoB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALR,CADJ;AAUH;;;;EApCqCrB,S;;SAArBI,Y","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, Image } from 'react-native';\nimport styles from './styles'\n\nimport { COLOR } from '../../colors'\nimport { IMAGE } from '../../images'\n\nexport default class ServicesCell extends Component {\n\n    render() {\n        const { item, index, show_only = false } = this.props\n        return (\n            <TouchableOpacity style={[styles.containerView]}\n                onPress={() => {\n                    if (!show_only) {\n                        this.props.onPress(index)\n                    }\n                }}>\n                <View style={styles.serviceContainer}>\n                    <Text style={styles.serviceTitle}>{item.name}</Text>\n                    <Text style={styles.serviceText}>{item.priceTxt}</Text>\n                </View>\n                {\n                    !show_only && this.renderImage()\n                }\n\n            </TouchableOpacity>\n        )\n    }\n\n    renderImage() {\n        const { index, selected } = this.props\n        var is_selected = selected.includes(index)\n        return (\n            <View style={styles.checkContainer}>\n                {is_selected ?\n                    <Image style={styles.checkIcon}\n                        source={IMAGE.check} />\n                    :\n                    <View style={styles.checkIcon} />\n                }\n            </View>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}